openapi: 3.0.0
##prism mock "D:\OpenAPI - Swagger\duongthuy.yaml"
info:
  version: 1.0.0
  title: OpenAPi Pet Hotel by Swagger - ĐỒ ÁN 1
  description: Hệ thống giúp tự động hóa các quy trình quản lý lưu trú, đặt phòng, và chăm sóc thú cưng mà còn hỗ trợ việc khách hàng có thể theo dõi tình trạng thú cưng trong thời gian lưu trú và tra cứu lịch sử dịch vụ của từng thú cưng một cách chính xác và thuận tiện.
  contact:
    email: duong.dtt2512@gmail.com
servers:
- url: http://localhost:8080
- description: Local Server
security:
- oauth2: []
tags:
- name: room
  description: Phòng lưu trú cho thú cưng
- name: pet
  description: Quản lý cho thú cưng 
- name: booking
  description: Hẹn lịch đặt phòng lưu trú cho thú cưng
- name: user
  description: Quản lý tài khoản người dùng
paths:
  /room/findByStatus: #endpoint
    get:
      tags:
      - room  # Nhóm các endpoint 
      summary: findRoomsByStatus
      description:  Tìm kiếm thú cưng bằng nhiều giá trị
      parameters: # Các tham số đầu vào của API
      - name: status
        in: query
        description: trạng thái phòng 
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/status2'
      responses:
        '200':
          description: Thành công
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
                description: successful operation
        '400':
          description: không tồn tại
        
      deprecated: false
      security:
      - oauth2:
        - write:pets
        - read:pets
  /pet/findByTags:
    get:
      tags:
      - pet
      summary: findPetsByTags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
                description: successful operation
        '400':
          description: Invalid tag value
      deprecated: false
      security:
      - oauth2:
        - write:pets
        - read:pets
  /pet/{petId}:
    post:
      tags:
      - pet
      summary: updatePetWithForm
      description: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
      - name: petId
        in: path
        description: ID of pet that needs to be updated
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding: {}
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Updated name of the pet
                status:
                  type: string
                  description: Updated status of the pet
        required: false
      responses:
        '200':
          description: ''
          headers: {}
        '405':
          description: Invalid input
      deprecated: false
      security:
      - oauth2:
        - write:pets
        - read:pets
    get:
      tags:
      - pet
      summary: getPetById
      description: Returns a single pet
      operationId: getPetById
      parameters:
      - name: petId
        in: path
        description: ID of pet to return
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      deprecated: false
    delete:
      tags:
      - pet
      summary: deletePet
      description: Deletes a pet
      operationId: deletePet
      parameters:
      - name: api_key
        in: header
        style: simple
        schema:
          type: string
      - name: petId
        in: path
        description: Pet id to delete
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: ''
          headers: {}
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      deprecated: false
      security:
      - oauth2:
        - write:pets
        - read:pets
  /pet:
    post:
      tags:
      - pet
      summary: addPet
      description: Add a new pet to the store
      operationId: addPet
      parameters: []
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: ''
          headers: {}
        '405':
          description: Invalid input
      deprecated: false
      security:
      - oauth2:
        - write:pets
        - read:pets
    put:
      tags:
      - pet
      summary: updatePet
      description: Update an existing pet
      operationId: updatePet
      parameters: []
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: ''
          headers: {}
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      deprecated: false
      security:
      - oauth2:
        - write:pets
        - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
      - pet
      summary: uploadFile
      description: uploads an image
      operationId: uploadFile
      parameters:
      - name: petId
        in: path
        description: ID of pet to update
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            encoding: {}
            schema:
              type: object
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
        required: false
      responses:
        '200':
          description: successful operation
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      deprecated: false
      security:
      - oauth2:
        - write:pets
        - read:pets
  /booking/create:
    post:
      tags:
      - booking
      summary: Tạo đơn đặt lịch lưu trú mới
      description: Tạo một đơn đặt lịch lưu trú cho thú cưng dựa trên thông tin của chủ và thời gian.
      requestBody:
        description: Thông tin cần thiết để tạo một đơn đặt lịch mới
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingOrder'
      responses:
        '201':
          description: Đơn đặt lịch được tạo thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingOrder'
        '400':
          description: Yêu cầu không hợp lệ
  /user/createWithList:
    post:
      tags:
      - user
      summary: createUsersWithListInput
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      parameters: []
      requestBody:
        description: List of user object
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
              description: List of user object
        required: true
      responses:
        '200':
          description: ''
          headers: {}
        default:
          description: successful operation
      deprecated: false
  /user/logout:
    get:
      tags:
      - user
      summary: logoutUser
      description: Logs out current logged in user session
      operationId: logoutUser
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
        default:
          description: successful operation
      deprecated: false
  /user:
    post:
      tags:
      - user
      summary: createUser
      description: This can only be done by the logged in user.
      operationId: createUser
      parameters: []
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: ''
          headers: {}
        default:
          description: successful operation
      deprecated: false
  /user/createWithArray:
    post:
      tags:
      - user
      summary: createUsersWithArrayInput
      description: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      parameters: []
      requestBody:
        description: List of user object
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
              description: List of user object
        required: true
      responses:
        '200':
          description: ''
          headers: {}
        default:
          description: successful operation
      deprecated: false
  /user/login:
    get:
      tags:
      - user
      summary: loginUser
      description: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          content:
            text/plain:
              schema:
                type: string
                description: successful operation
        '400':
          description: Invalid username/password supplied
      deprecated: false
components:
  schemas:
    Order:
      title: Order
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/Status1'
        complete:
          type: boolean
    Tag:
      title: Tag
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Category:
      title: Category
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Status:
      title: Status
      enum:
      - available
      - pending
      - sold
      type: string
      description: pet status in the store
    Pet:
      title: Pet
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
        photoUrls:
          type: array
          items:
            type: string
            xml:
              name: photoUrl
              attribute: false
              wrapped: false
          xml:
            attribute: false
            wrapped: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          xml:
            attribute: false
            wrapped: true
        status:
          $ref: '#/components/schemas/Status'
    ApiResponse:
      title: ApiResponse
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    status2:
      title: status2
      enum:
      - available
      - pending
      - sold
      type: string
    Status1:
      title: Status1
      enum:
      - placed
      - approved
      - delivered
      type: string
      description: Order Status
    BookingOrder:
      title: Đơn Đặt Lịch
      type: object
      properties:
        orderId:
          type: integer
          format: int64
          description: Mã đơn đặt lịch
        petId:
          type: integer
          format: int64
          description: ID của thú cưng trong đơn đặt lịch
        roomId:
          type: integer
          format: int64
          description: ID của phòng đã đặt cho thú cưng
        quantity:
          type: integer
          format: int32
          description: Số lượng thú cưng được đặt
        startDate:
          type: string
          format: date-time
          description: Ngày bắt đầu lưu trú
        endDate:
          type: string
          format: date-time
          description: Ngày kết thúc lưu trú
        status:
          type: string
          enum:
          - pending
          - confirmed
          - cancelled
          description: Trạng thái của đơn đặt lịch
        note:
          type: string
          description: Ghi chú thêm của khách hàng
      required:
        - orderId
        - petId
        - roomId
        - startDate
        - endDate
        - status
    User:
      title: User
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore.swagger.io/oauth/authorize
          scopes:
            read:pets: read your pets
            write:pets: modify pets in your account


